corr(threshold = 475)
corr(threshold = 775)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
test_fun <- function(x) a<<-x*2
test_fun(4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
makeVector(2)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- 1:10
makeVector(a)
cachemean(a)
m <- ""
x <- h
?solve
solve(a)
matrix(1:25, nrow = 5, ncol = 5)
matrix(1:25, nrow = 5, ncol = 5) -> 5
matrix(1:25, nrow = 5, ncol = 5) -> m
m
solve(m)
lapply
?InternalMethods
?match.fun
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
sapply(x, mean)
x1 <- sapply(x, mean)
x1$a
x1[a]
x1[[a]
]
x1[["a"]
]
x1[["b"]]
x1["b"]
c(a = 1:5, b = rnorm(10))
?runif
runif(4)
runif(4)
runif(4)
runif(4)
runif(4)
runif(4)
runif(4)
x <- 1:4
runif(x)
?mean(... = na.rm = trim =)
?mean
runif(x)
plot()
subm
cachemean
test_funm
m<- 2
n<- 4
n*m
m<- 2
n<- 4
n*m*a
24*80
m<- 2
n<- 4
n*m*a
source('~/Documents/Документы/Самообразование/Data Science/R Programming/Quiz_R/complete.R')
x <- matrix(rnorm(200), 20, 10)
x
View(x)
View(x)
apply(x, 2, mean)
apply(x, 3, mean)
apply(x, 4, mean)
apply(x, 5, mean)
apply(x, 1, mean)
apply(x, c(1, 2), mean)
View(x)
apply(x, 1, mean)
apply(x, 2, mean)
colMeans(x)
colMeans
?colMeans
x[2]
x
x[200]
x[[2]]
x[2]
x[,2]
quantile(x[,1])
apply(x, 1, quantile)
apply(x, 2, quantile)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
colMeans(a)
colMeans(a, dims = 1)
colMeans(a, dims = 2)
colMeans(a, dims = 2)
rowMeans(a, dims = 2)
rowMeans(a)
d <- 1:10
vector(10)
vector(length = 10)
f <- vector(length = 10)
f * c(1,2)
f + c(1,2)
d <- 1:10
tapply(d, f, mean)
tapply(d, f)
f <- as.factror(f)
?factor
f<- as.factor(f)
f
factor()
?gl
gl(3, 10)
f <- gl(3, 10)
d <- 1:30
tapply(d, f, mean)
tapply(d, f)
tapply(d, d)
tapply(d, d, mean)
f<- rep(1:3, 10)
tapply(d, f, mean)
tapply(d, f)
split(d,f)
sapply(split(d, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
str(s)
colMeans(airquality)
colMeans(s)
laply(colMeans(s))
lapply(colMeans(s))
lapply(s, colMeans)
sapply(s, colMeans)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
head(airquality[, c("Ozone", "Solar.R", "Wind")])
sapply(s[, c("Ozone", "Solar.R", "Wind")], colMeans)
?colMean
?colMeans
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T))
?interaction
x <- rnorm(10)
> f1 <- gl(2, 5)
> f2 <- gl(5, 2)
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
x
interaction(f1, f2)
f1
f2
rep_len(1:3, 12)
g<-rep_len(1:3, 12)
g1<-rep_len(1:3, 12)
g2<-rep_len(1:4, 12)
interaction(g1, g2)
g1
g2
class(interaction(g1, g2))
str(interaction(g1, g2))
g1<-rep_len(1:2, 12)
g2<-rep_len(1:3, 12)
interaction(g1, g2)
str(interaction(g1, g2))
source('~/Documents/Документы/Самообразование/Data Science/R Programming/Quiz_R/Assignment2_test.R')
fun <- function() m
fun()
m <- 10
fun()
x <- 10
makeVector(6)
makeVector$setmean(6)
a <- 1:10
cachemean(a)
rm(m)
x <- makeVector()
fun
rm(fun)
makeVector(x)
x$get
x$get()
x$setmean(13)
x$get()
x$getmean()
x <- makeVector(a)
x$get
x$get()
x$getmean()
source('~/.active-rstudio-document')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
#setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector
makeVector()
setmean = setmean,
setmean = setmean,
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
x$get()
x$getmean()
x$setmean("ckjcj")
x$getmean()
x$set("ВСё что угодно")
x$getmean
x$getmean()
x$get()
cachemean()
cachemean(a)
cachemean(x)
x <- makeVector(a)
x$get()
cachemean(x)
cachemean(x)
?solve
m <- matrix(data = c(1, 0, 2, 3), nrow = 2, ncol = 2)
m * m
m
m2 <- matix(data = c(-5, 4, -2, -1, -3, 0), nrow = 2, ncol = 3)
m2 <- matrix(data = c(-5, 4, -2, -1, -3, 0), nrow = 2, ncol = 3)
m * m2
solve(m, m2)
solve(m2)
solve(m)
m3 <- solve(m)
m * m3
m3 * m
100 * 100
m10000 <- matrix(1:10000, 100, 100)
solve(m10000)
m10000[10] <- -0.5
solve(m10000)
m10 <- matrix(rnorm(n = 10000), 100, 100)
solve(m10)
1000 * 1000
m100 <- matrix(rnorm(n = 1e+06), 1000, 1000)
s100 <- solve(m100)
ms100 <- m100 * s100
sum(ms100)
sum(s100)
sum(m100)
length(m100)
m1 <- matrix(rnorm(100), 10, 10)
m1
s1 <- solve(m1)
s1
s1 * m1
source('~/.active-rstudio-document')
m <- matrix(rnorm(100), 10, 10)
m
cache <- cacheSolve(m)
cache <- makeCacheMatrix(m)
m <- matrix(rnorm(25), 5, 5)
cacheSolve(cache)
m <- matrix(rnorm(16), 4, 4)
cacheSolve(cache)
cache$get()
cache$set(m)
cacheSolve(cache)
cache$set(m)
cache$get()
m <- matrix(rnorm(25), 5, 5)
cacheSolve(cache)
source('~/.active-rstudio-document')
m <- matrix(rnorm(25), 5, 5)
cache <- cacheSolve(m)
cache <- makeCacheMatrix(m)
m <- matrix(rnorm(16), 4, 4)
cacheSolve(cache)
cacheSolve(cache)
cache <- makeCacheMatrix(m)
m <- matrix(rnorm(25), 5, 5)
cacheSolve(cache)
cache <- makeCacheMatrix(m)
cache$get()
m <- matrix(rnorm(16), 4, 4)
cacheSolve(cache)
cache <- makeCacheMatrix(m)
cache$getinverse()
m <- matrix(rnorm(25), 5, 5)
cacheSolve(cache)
?download.file
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
?download.file
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
￼￼list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
Список файлов и
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
wich
?wich
?which
wich(andy$Day == 30)
which(andy$Day == 30)
which(andy$Day > 30)
which(andy$Day > 20)
which(andy$Day > 20, arr.ind = T)
?subset
subset(andy$Weight, andy$Day==30)
subset(andy)
subset(andy, andy$Weight == 137)
andy[which(andy$Day == 30), "Weight"]
head(andy$day, 1)
head(andy$Day, 1)
tail(andy$Day, 1)
files <- list.files("diet_data")
files[1]
head(read.csv(files[3]))
?sprintf
files <- list.files("diet_data", full.names = T)
head(read.csv(files[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
andy_david <- rbind(andy, read.csv(files[2]))
day_25 <- andy_david[which(andy_david$Day == 25), ]
andy_david[which(andy_david$Day == 25), ]
andy_david[andy_david$Day == 25, ]
for (i in 1:5) {
dat <- data.frame()
dat <- rbind(dat, read.csv(files[i]))
}
str(dat)
for (i in 1:5) {
dat <- data.frame()
dat <- rbind(dat, read.csv(files[i]))
print(files[i])
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files[i]))
}
dat[which(dat[, "Day"] == 30),]
dat["Day" == 30),]
dat["Day" == 30, ]
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
summary(tmp)
summary(files)
tmp <- vector(mode = "list", length = length(files))
summary(tmp)
?seq_along
seq_along(andy)
for (i in seq_along(files_full)) {
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
for (i in seq_along(files)) {
tmp[[i]] <- read.csv(files[[i]])
}
str(tmp)
str(lapply(files_full, read.csv))
str(lapply(files, read.csv))
output <- do.call(rbind, tmp)
str(output)
l <- list(1:10)
l
str(l)
l <- list(1:10, 2)
str(l)
do.call(c, l)
v <- 1:10
do.call(c, v)
?do.call
rbind(v, v)
rbind(v, v, v)
?message
?error
?stop
log(-1)
1/0
0/0
?invisible
invisible(andy)
a <- invisible(andy)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(4)
printmessage(jl)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
x
}
printmessage(jl)
printmessage(4)
printmessage("jl")
mean(ii)
traceback()
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
x
}
}
traceback()
lm(y ~x)
traceback()
debug
debug(mean)
mean(v)
debug(lm)
lm(y ~ x)
?options
options(error = recover)
printmessage <- function(x) {
if(x > 0)
print("x is greatepr than zero")
else
print("x is less than or equal to zero")
invisible(x)
x
}
}
lm( y ~ x)
jkjl
read.csv("ljlkjs")
lm( y ~ x)
q
q
options(error = NULL)
lm( y ~ x)
